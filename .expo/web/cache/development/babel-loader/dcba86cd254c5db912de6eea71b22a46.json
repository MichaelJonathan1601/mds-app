{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Routes;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar _analytics = _interopRequireDefault(require(\"@react-native-firebase/analytics\"));\n\nvar _AuthStack = _interopRequireDefault(require(\"./AuthStack\"));\n\nvar _AppStack = _interopRequireDefault(require(\"./AppStack\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\mich0\\\\Downloads\\\\Mds.App.V2-master\\\\Mds.App.V2-master\\\\src\\\\routes\\\\index.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Stack = (0, _stack.createStackNavigator)();\n\nfunction Routes() {\n  var _useSelector = (0, _reactRedux.useSelector)(function (state) {\n    return (0, _extends2.default)({}, state.login);\n  }),\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var routeNameRef = _react.default.useRef();\n\n  var navigationRef = _react.default.useRef();\n\n  return _react.default.createElement(_native.NavigationContainer, {\n    ref: navigationRef,\n    onReady: function onReady() {\n      return routeNameRef.current = navigationRef.current.getCurrentRoute().name;\n    },\n    onStateChange: function _callee() {\n      var previousRouteName, currentRouteName;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              previousRouteName = routeNameRef.current;\n              currentRouteName = navigationRef.current.getCurrentRoute().name;\n\n              if (!(previousRouteName !== currentRouteName)) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regenerator.default.awrap((0, _analytics.default)().logScreenView({\n                screen_name: currentRouteName,\n                screen_class: currentRouteName\n              }));\n\n            case 5:\n              console.log(\"The route changed to \" + currentRouteName);\n\n            case 6:\n              routeNameRef.current = currentRouteName;\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(Stack.Navigator, {\n    headerMode: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, isLoggedIn ? _react.default.createElement(Stack.Screen, {\n    name: \"App\",\n    component: _AppStack.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }) : _react.default.createElement(Stack.Screen, {\n    name: \"Auth\",\n    component: _AuthStack.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/mich0/Downloads/Mds.App.V2-master/Mds.App.V2-master/src/routes/index.js"],"names":["Stack","Routes","state","login","isLoggedIn","routeNameRef","React","useRef","navigationRef","current","getCurrentRoute","name","previousRouteName","currentRouteName","logScreenView","screen_name","screen_class","console","log","AppStack","AuthStack"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AAIA;;AAEA;;;;;;;;AAJA,IAAMA,KAAK,GAAG,kCAAd;;AAMe,SAASC,MAAT,GAAkB;AAC/B,qBAAqB,6BAAY,UAACC,KAAD;AAAA,sCAAgBA,KAAK,CAACC,KAAtB;AAAA,GAAZ,CAArB;AAAA,MAAOC,UAAP,gBAAOA,UAAP;;AAEA,MAAMC,YAAY,GAAGC,eAAMC,MAAN,EAArB;;AACA,MAAMC,aAAa,GAAGF,eAAMC,MAAN,EAAtB;;AAEA,SACE,6BAAC,2BAAD;AACE,IAAA,GAAG,EAAEC,aADP;AAEE,IAAA,OAAO,EAAE;AAAA,aACNH,YAAY,CAACI,OAAb,GAAuBD,aAAa,CAACC,OAAd,CAAsBC,eAAtB,GAAwCC,IADzD;AAAA,KAFX;AAKE,IAAA,aAAa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,cAAAA,iBADO,GACaP,YAAY,CAACI,OAD1B;AAEPI,cAAAA,gBAFO,GAEYL,aAAa,CAACC,OAAd,CAAsBC,eAAtB,GAAwCC,IAFpD;;AAAA,oBAITC,iBAAiB,KAAKC,gBAJb;AAAA;AAAA;AAAA;;AAAA;AAAA,gDAQL,0BAAYC,aAAZ,CAA0B;AAC9BC,gBAAAA,WAAW,EAAEF,gBADiB;AAE9BG,gBAAAA,YAAY,EAAEH;AAFgB,eAA1B,CARK;;AAAA;AAYXI,cAAAA,OAAO,CAACC,GAAR,2BAAoCL,gBAApC;;AAZW;AAgBbR,cAAAA,YAAY,CAACI,OAAb,GAAuBI,gBAAvB;;AAhBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAuBE,6BAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,UAAU,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,UAAU,GACT,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,KAAnB;AAAyB,IAAA,SAAS,EAAEe,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAGT,6BAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEC,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAvBF,CADF;AAiCD","sourcesContent":["import React, {useState, useRef} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {NavigationContainer} from '@react-navigation/native';\r\nimport {createStackNavigator} from '@react-navigation/stack';\r\n\r\nimport analytics from '@react-native-firebase/analytics';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nimport AuthStack from './AuthStack';\r\n\r\nimport AppStack from './AppStack';\r\n\r\nexport default function Routes() {\r\n  const {isLoggedIn} = useSelector((state) => ({...state.login}));\r\n\r\n  const routeNameRef = React.useRef();\r\n  const navigationRef = React.useRef();\r\n\r\n  return (\r\n    <NavigationContainer\r\n      ref={navigationRef}\r\n      onReady={() =>\r\n        (routeNameRef.current = navigationRef.current.getCurrentRoute().name)\r\n      }\r\n      onStateChange={async () => {\r\n        const previousRouteName = routeNameRef.current;\r\n        const currentRouteName = navigationRef.current.getCurrentRoute().name;\r\n\r\n        if (previousRouteName !== currentRouteName) {\r\n          // The line below uses the expo-firebase-analytics tracker\r\n          // https://docs.expo.io/versions/latest/sdk/firebase-analytics/\r\n          // Change this line to use another Mobile analytics SDK\r\n          await analytics().logScreenView({\r\n            screen_name: currentRouteName,\r\n            screen_class: currentRouteName,\r\n          });\r\n          console.log(`The route changed to ${currentRouteName}`);\r\n        }\r\n\r\n        // Save the current route name for later comparision\r\n        routeNameRef.current = currentRouteName;\r\n      }}>\r\n      <Stack.Navigator headerMode=\"none\">\r\n        {isLoggedIn ? (\r\n          <Stack.Screen name=\"App\" component={AppStack} />\r\n        ) : (\r\n          <Stack.Screen name=\"Auth\" component={AuthStack} />\r\n        )}\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"script"}