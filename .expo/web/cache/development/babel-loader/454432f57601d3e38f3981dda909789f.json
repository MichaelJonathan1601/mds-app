{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.postAgenda = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _api = _interopRequireDefault(require(\"./api\"));\n\nvar postAgenda = function postAgenda(accountId, date, desc, sector, token) {\n  return _regenerator.default.async(function postAgenda$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap(_api.default.post(\"/v1/seguros-mds/scheduling\", {\n            accountId: accountId,\n            date: date,\n            message: desc,\n            active: true,\n            sector: sector\n          }, {\n            headers: {\n              Authorization: \"BEARER \" + token\n            }\n          }).then(function (res) {\n            console.log(res.data);\n          }));\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\", 'Não foi possível agendar, tente novamente');\n\n        case 9:\n          return _context.abrupt(\"return\", 'Agendamento Concluído');\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nexports.postAgenda = postAgenda;","map":{"version":3,"sources":["C:/Users/mich0/Downloads/Mds.App.V2-master/Mds.App.V2-master/src/services/agendamento.js"],"names":["postAgenda","accountId","date","desc","sector","token","api","post","message","active","headers","Authorization","then","res","console","log","data"],"mappings":";;;;;;;;;AAAA;;AAEO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAOC,SAAP,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEhBC,aACHC,IADG,+BAGF;AACEN,YAAAA,SAAS,EAAEA,SADb;AAEEC,YAAAA,IAAI,EAAEA,IAFR;AAGEM,YAAAA,OAAO,EAAEL,IAHX;AAIEM,YAAAA,MAAM,EAAE,IAJV;AAKEL,YAAAA,MAAM,EAAEA;AALV,WAHE,EAUF;AACEM,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,cAAYN;AADlB;AADX,WAVE,EAgBHO,IAhBG,CAgBE,UAACC,GAAD,EAAS;AACbC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACD,WAlBG,CAFgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsBtBF,UAAAA,OAAO,CAACC,GAAR;AAtBsB,2CAuBf,2CAvBe;;AAAA;AAAA,2CAyBjB,uBAzBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["import api from './api';\r\n\r\nexport const postAgenda = async (accountId, date, desc, sector, token) => {\r\n  try {\r\n    await api\r\n      .post(\r\n        `/v1/seguros-mds/scheduling`,\r\n        {\r\n          accountId: accountId,\r\n          date: date,\r\n          message: desc,\r\n          active: true,\r\n          sector: sector,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `BEARER ${token}`,\r\n          },\r\n        },\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  } catch (e) {\r\n    console.log(e);\r\n    return 'Não foi possível agendar, tente novamente';\r\n  }\r\n  return 'Agendamento Concluído';\r\n};\r\n"]},"metadata":{},"sourceType":"script"}