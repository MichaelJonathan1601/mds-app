{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateCompound = exports.validateStruct = exports.default = void 0;\n\nvar _index = require(\"superstruct/lib/index\");\n\nvar _validate = require(\"./validate\");\n\nvar _default = (0, _index.superstruct)({\n  types: {\n    shortDate: function shortDate(value) {\n      return typeof value === 'string' && !!value.match(/^\\d{4}-\\d{2}-\\d{2}$/);\n    }\n  }\n});\n\nexports.default = _default;\n\nvar validateStruct = function validateStruct() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var struct = arguments.length > 1 ? arguments[1] : undefined;\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  try {\n    return struct(value);\n  } catch (e) {\n    var path = e.path,\n        reason = e.reason;\n    var key = path[0];\n\n    if (reason === undefined) {\n      throw new Error(prefix + \" unknown property '\" + key + \"'.\");\n    }\n\n    e.message = prefix + \" \" + e.message;\n    throw e;\n  }\n};\n\nexports.validateStruct = validateStruct;\n\nvar validateCompound = function validateCompound() {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var a = arguments.length > 1 ? arguments[1] : undefined;\n  var b = arguments.length > 2 ? arguments[2] : undefined;\n  var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n  if ((0, _validate.isUndefined)(source[a]) && !(0, _validate.isUndefined)(source[b]) || !(0, _validate.isUndefined)(source[a]) && (0, _validate.isUndefined)(source[b])) {\n    throw new Error(prefix + \" if you supply the '\" + a + \"' parameter, you must also supply the '\" + b + \"' parameter.\");\n  }\n};\n\nexports.validateCompound = validateCompound;","map":{"version":3,"sources":["C:/Users/mich0/Downloads/Mds.App.V2-master/Mds.App.V2-master/node_modules/@react-native-firebase/app/lib/common/struct.js"],"names":["types","shortDate","value","match","validateStruct","struct","prefix","e","path","reason","key","undefined","Error","message","validateCompound","source","a","b"],"mappings":";;;;;AAgBA;;AACA;;eAEe,wBAAY;AACzBA,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,mBAAAC,KAAK;AAAA,aAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAAC,CAACA,KAAK,CAACC,KAAN,CAAY,qBAAZ,CAAnC;AAAA;AADX;AADkB,CAAZ,C;;;;AAMR,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAqC;AAAA,MAApCF,KAAoC,uEAA5B,EAA4B;AAAA,MAAxBG,MAAwB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AACjE,MAAI;AACF,WAAOD,MAAM,CAACH,KAAD,CAAb;AACD,GAFD,CAEE,OAAOK,CAAP,EAAU;AACV,QAAQC,IAAR,GAAyBD,CAAzB,CAAQC,IAAR;AAAA,QAAcC,MAAd,GAAyBF,CAAzB,CAAcE,MAAd;AACA,QAAMC,GAAG,GAAGF,IAAI,CAAC,CAAD,CAAhB;;AAEA,QAAIC,MAAM,KAAKE,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAaN,MAAb,2BAAyCI,GAAzC,QAAN;AACD;;AAEDH,IAAAA,CAAC,CAACM,OAAF,GAAeP,MAAf,SAAyBC,CAAC,CAACM,OAA3B;AAEA,UAAMN,CAAN;AACD;AACF,CAfM;;;;AAiBA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAoC;AAAA,MAAnCC,MAAmC,uEAA1B,EAA0B;AAAA,MAAtBC,CAAsB;AAAA,MAAnBC,CAAmB;AAAA,MAAhBX,MAAgB,uEAAP,EAAO;;AAClE,MACG,2BAAYS,MAAM,CAACC,CAAD,CAAlB,KAA0B,CAAC,2BAAYD,MAAM,CAACE,CAAD,CAAlB,CAA5B,IACC,CAAC,2BAAYF,MAAM,CAACC,CAAD,CAAlB,CAAD,IAA2B,2BAAYD,MAAM,CAACE,CAAD,CAAlB,CAF9B,EAGE;AACA,UAAM,IAAIL,KAAJ,CACDN,MADC,4BAC4BU,CAD5B,+CACuEC,CADvE,kBAAN;AAGD;AACF,CATM","sourcesContent":["/*\n *  Copyright (c) 2016-present Invertase Limited & Contributors\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this library except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport { superstruct } from 'superstruct/lib/index';\nimport { isUndefined } from './validate';\n\nexport default superstruct({\n  types: {\n    shortDate: value => typeof value === 'string' && !!value.match(/^\\d{4}-\\d{2}-\\d{2}$/),\n  },\n});\n\nexport const validateStruct = (value = {}, struct, prefix = '') => {\n  try {\n    return struct(value);\n  } catch (e) {\n    const { path, reason } = e;\n    const key = path[0];\n\n    if (reason === undefined) {\n      throw new Error(`${prefix} unknown property '${key}'.`);\n    }\n\n    e.message = `${prefix} ${e.message}`;\n\n    throw e;\n  }\n};\n\nexport const validateCompound = (source = {}, a, b, prefix = '') => {\n  if (\n    (isUndefined(source[a]) && !isUndefined(source[b])) ||\n    (!isUndefined(source[a]) && isUndefined(source[b]))\n  ) {\n    throw new Error(\n      `${prefix} if you supply the '${a}' parameter, you must also supply the '${b}' parameter.`,\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"script"}