{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\mich0\\\\Downloads\\\\Mds.App.V2-master\\\\Mds.App.V2-master\\\\node_modules\\\\react-native-date-picker\\\\src\\\\DatePickerIOS.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar RCTDatePickerIOS = (0, _reactNative.requireNativeComponent)('RNDatePicker');\n\nvar DatePickerIOS = function (_React$Component) {\n  (0, _inherits2.default)(DatePickerIOS, _React$Component);\n\n  var _super = _createSuper(DatePickerIOS);\n\n  function DatePickerIOS() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DatePickerIOS);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._picker = null;\n\n    _this._onChange = function (event) {\n      var nativeTimeStamp = event.nativeEvent.timestamp;\n      _this.props.onDateChange && _this.props.onDateChange(new Date(nativeTimeStamp));\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DatePickerIOS, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.date) {\n        var propsTimeStamp = this.props.date.getTime();\n\n        if (this._picker) {\n          this._picker.setNativeProps({\n            date: propsTimeStamp\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      return _react.default.createElement(RCTDatePickerIOS, {\n        testID: props.testID,\n        key: props.textColor,\n        ref: function ref(picker) {\n          _this2._picker = picker;\n        },\n        style: [styles.datePickerIOS, props.style],\n        date: props.date ? props.date.getTime() : undefined,\n        locale: props.locale ? props.locale : undefined,\n        maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,\n        minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,\n        mode: props.mode,\n        minuteInterval: props.minuteInterval,\n        timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,\n        onChange: this._onChange,\n        onStartShouldSetResponder: function onStartShouldSetResponder() {\n          return true;\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest() {\n          return false;\n        },\n        textColor: props.textColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n  return DatePickerIOS;\n}(_react.default.Component);\n\nexports.default = DatePickerIOS;\n\nvar styles = _reactNative.StyleSheet.create({\n  datePickerIOS: {\n    height: 216,\n    width: 310\n  }\n});","map":{"version":3,"sources":["C:/Users/mich0/Downloads/Mds.App.V2-master/Mds.App.V2-master/node_modules/react-native-date-picker/src/DatePickerIOS.js"],"names":["RCTDatePickerIOS","DatePickerIOS","_picker","_onChange","event","nativeTimeStamp","nativeEvent","timestamp","props","onDateChange","Date","date","propsTimeStamp","getTime","setNativeProps","testID","textColor","picker","styles","datePickerIOS","style","undefined","locale","maximumDate","minimumDate","mode","minuteInterval","timeZoneOffsetInMinutes","React","Component","StyleSheet","create","height","width"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,yCAAuB,cAAvB,CAAzB;;IAEqBC,a;;;;;;;;;;;;;;;UACnBC,O,GAAU,I;;UAaVC,S,GAAY,UAAAC,KAAK,EAAI;AACnB,UAAMC,eAAe,GAAGD,KAAK,CAACE,WAAN,CAAkBC,SAA1C;AACA,YAAKC,KAAL,CAAWC,YAAX,IACE,MAAKD,KAAL,CAAWC,YAAX,CAAwB,IAAIC,IAAJ,CAASL,eAAT,CAAxB,CADF;AAED,K;;;;;;;WAfD,8BAAqB;AACnB,UAAI,KAAKG,KAAL,CAAWG,IAAf,EAAqB;AACnB,YAAMC,cAAc,GAAG,KAAKJ,KAAL,CAAWG,IAAX,CAAgBE,OAAhB,EAAvB;;AACA,YAAI,KAAKX,OAAT,EAAkB;AAChB,eAAKA,OAAL,CAAaY,cAAb,CAA4B;AAC1BH,YAAAA,IAAI,EAAEC;AADoB,WAA5B;AAGD;AACF;AACF;;;WAQD,kBAAS;AAAA;;AACP,UAAQJ,KAAR,GAAkB,IAAlB,CAAQA,KAAR;AACA,aACE,6BAAC,gBAAD;AACE,QAAA,MAAM,EAAEA,KAAK,CAACO,MADhB;AAEE,QAAA,GAAG,EAAEP,KAAK,CAACQ,SAFb;AAGE,QAAA,GAAG,EAAE,aAAAC,MAAM,EAAI;AACb,UAAA,MAAI,CAACf,OAAL,GAAee,MAAf;AACD,SALH;AAME,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,aAAR,EAAuBX,KAAK,CAACY,KAA7B,CANT;AAOE,QAAA,IAAI,EAAEZ,KAAK,CAACG,IAAN,GAAaH,KAAK,CAACG,IAAN,CAAWE,OAAX,EAAb,GAAoCQ,SAP5C;AAQE,QAAA,MAAM,EAAEb,KAAK,CAACc,MAAN,GAAed,KAAK,CAACc,MAArB,GAA8BD,SARxC;AASE,QAAA,WAAW,EACTb,KAAK,CAACe,WAAN,GAAoBf,KAAK,CAACe,WAAN,CAAkBV,OAAlB,EAApB,GAAkDQ,SAVtD;AAYE,QAAA,WAAW,EACTb,KAAK,CAACgB,WAAN,GAAoBhB,KAAK,CAACgB,WAAN,CAAkBX,OAAlB,EAApB,GAAkDQ,SAbtD;AAeE,QAAA,IAAI,EAAEb,KAAK,CAACiB,IAfd;AAgBE,QAAA,cAAc,EAAEjB,KAAK,CAACkB,cAhBxB;AAiBE,QAAA,uBAAuB,EAAElB,KAAK,CAACmB,uBAjBjC;AAkBE,QAAA,QAAQ,EAAE,KAAKxB,SAlBjB;AAmBE,QAAA,yBAAyB,EAAE;AAAA,iBAAM,IAAN;AAAA,SAnB7B;AAoBE,QAAA,6BAA6B,EAAE;AAAA,iBAAM,KAAN;AAAA,SApBjC;AAqBE,QAAA,SAAS,EAAEK,KAAK,CAACQ,SArBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAyBD;;;EA/CwCY,eAAMC,S;;;;AAkDjD,IAAMX,MAAM,GAAGY,wBAAWC,MAAX,CAAkB;AAC/BZ,EAAAA,aAAa,EAAE;AACba,IAAAA,MAAM,EAAE,GADK;AAEbC,IAAAA,KAAK,EAAE;AAFM;AADgB,CAAlB,CAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, View, requireNativeComponent } from 'react-native'\n\nconst RCTDatePickerIOS = requireNativeComponent('RNDatePicker')\n\nexport default class DatePickerIOS extends React.Component {\n  _picker = null\n\n  componentDidUpdate() {\n    if (this.props.date) {\n      const propsTimeStamp = this.props.date.getTime()\n      if (this._picker) {\n        this._picker.setNativeProps({\n          date: propsTimeStamp,\n        })\n      }\n    }\n  }\n\n  _onChange = event => {\n    const nativeTimeStamp = event.nativeEvent.timestamp\n    this.props.onDateChange &&\n      this.props.onDateChange(new Date(nativeTimeStamp))\n  }\n\n  render() {\n    const { props } = this\n    return (\n      <RCTDatePickerIOS\n        testID={props.testID}\n        key={props.textColor} // preventing \"Today\" string keep old text color when text color changes\n        ref={picker => {\n          this._picker = picker\n        }}\n        style={[styles.datePickerIOS, props.style]}\n        date={props.date ? props.date.getTime() : undefined}\n        locale={props.locale ? props.locale : undefined}\n        maximumDate={\n          props.maximumDate ? props.maximumDate.getTime() : undefined\n        }\n        minimumDate={\n          props.minimumDate ? props.minimumDate.getTime() : undefined\n        }\n        mode={props.mode}\n        minuteInterval={props.minuteInterval}\n        timeZoneOffsetInMinutes={props.timeZoneOffsetInMinutes}\n        onChange={this._onChange}\n        onStartShouldSetResponder={() => true}\n        onResponderTerminationRequest={() => false}\n        textColor={props.textColor}\n      />\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  datePickerIOS: {\n    height: 216,\n    width: 310,\n  },\n})\n"]},"metadata":{},"sourceType":"script"}